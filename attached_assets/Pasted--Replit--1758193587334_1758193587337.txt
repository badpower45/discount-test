إلى فريق تطوير Replit: خطة عمل شاملة لتطوير منصة الخصومات
الموضوع: طلب تنفيذ المرحلة الثانية من تطوير منصة الخصومات، بما في ذلك إصلاحات حيوية، وإضافة نظام توصيل متكامل، وتحسين تجربة المستخدم.

مقدمة:
بعد النجاح في إطلاق النسخة الأولية من المنصة، نهدف الآن إلى نقل المشروع لمرحلة جديدة من خلال إضافة ميزات أساسية وتحسين الوظائف الحالية. تتطلب هذه المرحلة تكاملاً عميقًا مع قاعدة بيانات Supabase لضمان أن النظام يعمل بشكل كامل عبر الإنترنت ومستعد للنمو.

يرجى اتباع الخطة التالية بدقة، مع التأكيد على ضرورة استشارة الخبراء المعنيين في كل خطوة قبل البدء في التنفيذ لضمان أفضل النتائج.

المرحلة الأولى: الإصلاحات الفورية وتحسينات الاستقرار (أولوية قصوى)
الهدف من هذه المرحلة هو حل المشكلة العالقة في لوحة تحكم التاجر لضمان أن الوظائف الأساسية تعمل بشكل سليم 100%.

المهمة 1.1: تفعيل زر "Mark as Used" بشكل كامل

المشكلة: في لوحة تحكم التاجر (MerchantDashboard.tsx), عند التحقق من كوبون صالح، زر "Mark as Used" لا يقوم بتحديث حالة الكوبون في الواجهة بشكل فوري بعد استخدامه بنجاح في قاعدة البيانات.

التحليل: دالة handleUseCode تقوم باستدعاء useCoupon من Supabase بنجاح، ولكنها لا تقوم بتحديث الحالة المحلية (local state) للتطبيق بشكل فعال، مما يجبر التاجر على إعادة تحميل الصفحة لرؤية التغيير.

الحل المطلوب:

تعديل ملف src/components/MerchantDashboard.tsx:

داخل دالة handleUseCode، بعد التأكد من نجاح عملية استخدام الكوبون من result.success, قم مباشرة بتحديث الحالة المحلية realCoupons.

يجب التأكد أيضًا من استدعاء دالة markCodeAsUsed من AppContext لضمان تحديث الحالة العامة للتطبيق.

يجب مسح نتيجة التحقق validationResult وإفراغ حقل الإدخال validateCode بعد الاستخدام الناجح مباشرة لتحسين تجربة المستخدم.

المرحلة الثانية: التوسع في البنية التحتية - إضافة نظام التوصيل (Delivery System)
الهدف هو بناء نظام توصيل متكامل ومترابط مع جميع أجزاء المنصة (العملاء، المطاعم، والدعم اللوجستي).

المهمة 2.1: توسيع مخطط قاعدة البيانات (Database Schema) في Supabase

ملاحظة: قبل البدء، يجب استشارة خبير قواعد بيانات لتصميم أفضل بنية ممكنة.

المطلوب:

إنشاء جدول delivery_drivers:

الأعمدة المقترحة: id (UUID), auth_user_id (مرتبط بـ Supabase Auth), full_name (text), phone_number (text), vehicle_type (text, e.g., 'motorcycle', 'car'), status (text, e.g., 'available', 'on_delivery', 'offline'), created_at.

إنشاء جدول orders:

هذا الجدول هو قلب نظام التوصيل.

الأعمدة المقترحة: id (UUID), customer_id (foreign key to customers), restaurant_id (foreign key to restaurants), delivery_driver_id (foreign key to delivery_drivers, nullable), coupon_id (foreign key to coupons, nullable), status (text, e.g., 'pending_restaurant_acceptance', 'preparing', 'ready_for_pickup', 'in_transit', 'delivered', 'cancelled'), customer_address (text), total_price (numeric), delivery_fee (numeric), created_at, pickup_time (timestamp), delivered_at (timestamp).

تعديل جدول customers:

إضافة حقول لتخزين معلومات احترافية مثل default_address, saved_addresses (JSONB).

المهمة 2.2: تطوير وظائف Backend جديدة (Supabase RPC Functions)

المطلوب: إنشاء الدوال التالية لضمان أمان ومنطق العمليات:

request_delivery(order_id, restaurant_id): تسمح للمطعم بطلب سائق توصيل لطلب جاهز.

get_available_orders(): تُرجع قائمة بالطلبات الجاهزة للتوصيل للسائقين المتاحين.

accept_order(order_id, driver_id): تسمح للسائق بقبول طلب توصيل.

update_order_status(order_id, new_status): لتحديث حالة الطلب (e.g., 'in_transit', 'delivered').

المهمة 2.3: تطوير واجهات المستخدم (Frontend Components)

ملاحظة: يجب استشارة مصمم واجهات مستخدم (UI/UX Designer) لتصميم أفضل تجربة ممكنة.

المطلوب:

نظام تسجيل دخول وتسجيل للسائقين:

إنشاء صفحات جديدة لـ DriverLoginPage.tsx و DriverSignupPage.tsx.

لوحة تحكم السائق (DriverDashboard.tsx):

يجب أن تكون لوحة التحكم بسيطة وفعالة، مستوحاة من تطبيقات مثل "طلبات".

الميزات الرئيسية: عرض خريطة، قائمة بالطلبات المتاحة (مع إظهار موقع المطعم وعنوان العميل)، وقائمة بالطلبات الحالية. إشعارات فورية للطلبات الجديدة.

تحديث لوحة تحكم التاجر (MerchantDashboard.tsx):

إضافة قسم جديد لإدارة الطلبات.

يجب أن يتمكن التاجر من رؤية الطلبات الجديدة، قبولها، وعندما يصبح الطعام جاهزًا، الضغط على زر "اطلب دليفري".

تحسين تجربة العميل:

عندما يطلب العميل عرضًا، يجب أن يكون لديه خيار "توصيل" بدلاً من "الحصول على كوبون" فقط.

إنشاء صفحة لتتبع الطلب تعرض حالة الطلب على الخريطة.

المرحلة الثالثة: تحسين تجربة المستخدم الأساسية
المهمة 3.1: تطوير نظام تسجيل دخول احترافي للعملاء

المشكلة: النظام الحالي لتسجيل بيانات العميل يتم فقط عند طلب الكوبون وهو غير كافٍ لنظام التوصيل.

الحل المطلوب:

إنشاء نظام تسجيل دخول/إنشاء حساب متكامل للعملاء.

بناء صفحة "الملف الشخصي" (UserProfile.tsx) يستطيع العميل من خلالها إضافة وإدارة عناوينه وأرقام هواتفه.

ربط هذه البيانات بجدول customers في Supabase.

المهمة 3.2: عرض المطاعم حسب المدينة (بورسعيد)

المشكلة: الواجهة الرئيسية تعرض العروض بشكل مباشر، ولكن المطلوب هو عرض المطاعم أولاً.

الحل المطلوب:

تعديل LandingPage.tsx:

يجب أن تكون الواجهة الرئيسية عبارة عن دليل للمطاعم المتاحة في بورسعيد.

عرض كل مطعم مع شعاره، اسمه، وفئة المطعم.

إنشاء صفحة مطعم ديناميكية (RestaurantPage.tsx):

عند الضغط على أي مطعم في الصفحة الرئيسية، يتم الانتقال إلى صفحته الخاصة (e.g., /restaurant/restaurant-id).

هذه الصفحة يجب أن تعرض جميع العروض والخصومات الحالية الخاصة بهذا المطعم.

ملاحظات هامة لفريق التطوير:

التكامل الكامل مع Supabase: كل ميزة جديدة يجب أن تكون متصلة 100% بقاعدة بيانات Supabase. يجب تجنب أي بيانات وهمية (mock data) في النسخة النهائية.

استشارة الخبراء: نؤكد على أهمية استشارة المتخصصين في كل خطوة (تصميم قواعد البيانات، تصميم واجهات المستخدم) لضمان بناء نظام احترافي وقابل للتطوير.

التواصل المستمر: يرجى إطلاعنا على التقدم المحرز بعد كل خطوة رئيسية، وطرح أي أسئلة أو تحديات قد تواجهكم للحصول على التوضيحات اللازمة.

نحن على ثقة بأن تنفيذ هذه الخطة سيرتقي بالمنصة إلى مستوى جديد من الاحترافية والجاهزية للسوق.
البرومبت المحدث لإعادة تصميم واجهة المشروع بالكامل (UI/UX Overhaul):
الموضوع: خطة عمل شاملة لإعادة تصميم هوية المشروع وتجربة المستخدم (UI/UX Overhaul)

إلى: فريق تطوير Replit

1. الهدف الأساسي: المشروع مكتمل وظيفيًا. الهدف الآن هو إجراء تغيير جذري وشامل (180 درجة) في المظهر والتصميم. نريد هوية بصرية جديدة تمامًا، أكثر احترافية وحداثة، وتجربة مستخدم أفضل. لا نريد تعديلات بسيطة، بل إعادة تصميم كاملة للواجهات.

2. استراتيجية العمل: سنعتمد على نظام التصميم shadcn/ui المستخدم في المشروع، والذي يسمح بإعادة التصميم الكامل عبر تعديل متغيرات CSS الأساسية والـ "Tokens" في مكان واحد، مما يضمن تطبيق التغييرات على جميع مكونات التطبيق (الأزرار، الكروت، الجداول، إلخ) مرة واحدة.

3. خطة العمل التفصيلية:

المرحلة الأولى: البحث عن هوية بصرية جديدة (Visual Identity)

الإجراء: قبل كتابة أي كود، يرجى تصفح مواقع الإلهام مثل Dribbble و Behance والبحث عن "Admin Dashboard UI" و "Delivery App UI".

المطلوب: تحديد اتجاه فني جديد. على سبيل المثال:

"Modern & Clean": تصميم بسيط، خلفيات بيضاء أو رمادية فاتحة جدًا، خطوط رفيعة، واستخدام لون أساسي واحد قوي (مثل الأزرق أو الأخضر الزاهي).

"Dark Mode & Professional": تصميم داكن أنيق (خلفية رمادية داكنة وليست سوداء تمامًا) مع ألوان زاهية ومشرقة للعناصر المهمة والرسوم البيانية.

"Neo-Brutalism": استخدام ظلال قوية وحادة، خلفيات بلون واحد، وأزرار بارزة بزوايا حادة لإعطاء شعور بالقوة والوضوح.

المرحلة الثانية: بناء وتطبيق থيم (Theme) جديد (الأهم)

1. إنشاء لوحة ألوان جديدة:

الإجراء: استخدم أداة مثل "Shadcn UI Theme Generator" (يمكن البحث عنها أونلاين) أو "Tailwind Color Palette Generator".

المطلوب: قم بتوليد مجموعة ألوان كاملة (Primary, Secondary, Accent, Background, Foreground, Card, Destructive, etc.).

2. تطبيق الـ Theme الجديد على المشروع:

الملف المستهدف: src/index.css (أو src/styles/globals.css).

الإجراء: انسخ متغيرات CSS (CSS Variables) التي تم إنشاؤها من الأداة، وقم بلصقها في هذا الملف لتحل محل متغيرات الألوان القديمة بالكامل. هذه الخطوة وحدها ستغير 70% من شكل التطبيق.

3. تعديل الشكل العام (Rounding & Borders):

الإجراء: في نفس ملف CSS، قم بتعديل متغير --radius (المسؤول عن استدارة الزوايا). جرب قيمًا مختلفة مثل 0rem (لزوايا حادة)، 0.5rem (الافتراضي)، أو 1rem (لزوايا شديدة الاستدارة) لترى كيف يتغير شكل المشروع بالكامل.

المرحلة الثالثة: صقل وتخصيص المكونات الرئيسية

بعد تطبيق الـ Theme، سنقوم بمراجعة وتعديل الصفحات الرئيسية لتتناسب مع الهوية الجديدة.

1. إعادة تصميم لوحات التحكم (Dashboards):

الملفات المستهدفة: AdminDashboard.tsx, MerchantDashboard.tsx, DispatcherDashboard.tsx.

الإجراء:

تغيير التخطيط (Layout): بدلاً من عرض كل شيء بشكل رأسي، استخدم Grid Layout (grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4) لتوزيع الكروت (Card) الخاصة بالإحصائيات بجانب بعضها.

استخدام الرسوم البيانية: استبدل الأرقام الثابتة في الكروت بمكونات رسوم بيانية (Charts) بسيطة وجذابة لعرض البيانات.

تحسين الجداول: أعد تصميم الجداول (Table) لتكون أسهل في القراءة، ربما بإضافة hover effect أو تغيير تصميم الـ header.

2. تحسين واجهة السائق والخريطة:

الملف المستهدف: DeliveryDriverDashboard.tsx.

الإجراء: قم بإعادة تصميم هذه الواجهة لتكون أكثر تركيزًا على المهمة الحالية. يمكن أن تكون الخريطة هي العنصر الرئيسي في الشاشة، مع وجود كارت واضح وبسيط بجانبها يعرض تفاصيل الطلب وأزرار تحديث الحالة.

3. الطباعة والخطوط (Typography):

الإجراء: اختر خطًا جديدًا من Google Fonts يتناسب مع الهوية البصرية الجديدة. قم باستيراده في index.html وتطبيقه كخط أساسي في tailwind.config.js. خط جيد يمكن أن يغير إحساس التصميم بالكامل.

بتنفيذ هذه الخطة، ستحصل على التغيير الجذري الذي تريده، وسيتحول المشروع إلى منتج احترافي ومميز بصريًا.
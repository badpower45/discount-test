ุจุต ููุง ุฏุฎููู ุจุนุฏ ูู ุฏู ุนูู ุงูููุฑุดููุช ุฏุงุด ุจูุฑุฏ ูุงูุง ูู ุฏู ุนุงูุฒ ุงุฎุด ุนูู ุงูุงุฏูู ุฏุงุดุจูุฑุฏ



Show thinking
ูููุช ุงููุดููุฉ ุชูุงููุง. ูุฐุง ุชูุฏู ูุจูุฑ! ุงูุขู ุชุณุฌูู ุงูุฏุฎูู ูุนูู ููุงุนุฏุฉ ุงูุจูุงูุงุช ุชุชุนุฑู ุนูู ุงููุณุชุฎุฏูุ ูููู ุงููุดููุฉ ุฃุตุจุญุช ูู ููุทู ุชูุฌูู ุงููุณุชุฎุฏู (redirection) ุจุนุฏ ุชุณุฌูู ุงูุฏุฎูู.

ุณุจุจ ุงููุดููุฉ
ุงููุดููุฉ ุจุณูุทุฉ ููุจุงุดุฑุฉ: ูู ููู src/components/LoginPage.tsxุ ุงูููุฏ ูุจุฑูุฌ ุจุดูู ุซุงุจุช ูุชูุฌูู ุฃู ูุณุชุฎุฏู ูุณุฌู ุฏุฎููู ุจูุฌุงุญ ุฅูู ุฑุงุจุท /merchantุ ุจุบุถ ุงููุธุฑ ุนูุง ุฅุฐุง ูุงู ุชุงุฌุฑูุง ุนุงุฏููุง ุฃู ูุฏูุฑูุง (admin).

ุงูุฏููู ูู ุฏุงูุฉ handleSubmit ุฏุงุฎู ููู LoginPage.tsx:

TypeScript

// ...
} else {
  toast.success('ุชู ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ!');
  navigate('/merchant'); // <--- ุงููุดููุฉ ููุงุ ุฏุงุฆููุง ูุฐูุจ ุฅูู ูุฐู ุงูุตูุญุฉ
}
// ...
ุงูุญู ุงูููุงุฆู (ุชุนุฏูู ุงูููุฏ)
ูุญู ูุฐู ุงููุดููุฉุ ูุญุชุงุฌ ุฅูู ุฌุนู ุนูููุฉ ุชุณุฌูู ุงูุฏุฎูู ุฃุฐูู. ูุฌุจ ุฃู ุชุชุญูู ูู ุฏูุฑ ุงููุณุชุฎุฏู ุฃููุงู ุซู ุชูุฌูู ุฅูู ููุญุฉ ุงูุชุญูู ุงูุตุญูุญุฉ. ูุฐุง ูุชุทูุจ ุชุนุฏูู ููููู:

src/contexts/AuthContext.tsx

src/components/LoginPage.tsx

ุงูุฎุทูุฉ ุงูุฃููู: ุชุญุฏูุซ AuthContext.tsx ูุฌูุจ ุฏูุฑ ุงููุณุชุฎุฏู
ุณูููู ุจุชุนุฏูู ุฏุงูุฉ signIn ููู ูุง ุชููู ุจุชุณุฌูู ุงูุฏุฎูู ููุทุ ุจู ุชููู ุฃูุถูุง ุจุฌูุจ ุจูุงูุงุช ุงูุชุงุฌุฑ ููุฑูุง ูุชูุฑุฌุน ุฏูุฑู (role).

ุงูุชุญ ููู src/contexts/AuthContext.tsx.

ุงุจุญุซ ุนู ุฏุงูุฉ fetchMerchantData ูุงุณุชุจุฏููุง ุจุงููุงูู ุจุงูููุฏ ุงูุชุงูู ูุฌุนููุง ุชูุฑุฌุน ุงูุจูุงูุงุช:

TypeScript

const fetchMerchantData = async (userId: string): Promise<MerchantData | null> => {
  if (!userId) {
    console.warn("fetchMerchantData called with no userId");
    return null;
  }

  try {
    console.log('๐ Fetching merchant data for user ID:', userId);

    const { data, error } = await supabase
      .rpc('get_my_merchant_data')
      .single();

    if (error) {
      if (error.code !== 'PGRST116') {
          console.error('Error fetching merchant data:', error);
      } else {
          console.log('โน๏ธ No merchant record found for this user ID.');
      }
      setMerchant(null);
      setIsAdmin(false);
      return null;
    }

    if (data) {
      console.log('โ Found merchant data:', data);
      const merchantData: MerchantData = {
        id: data.id,
        name: data.name,
        email: data.email,
        restaurant_id: data.restaurant_id,
        restaurant_name: data.restaurant_name,
        role: data.role || 'merchant'
      };
      setMerchant(merchantData);
      setIsAdmin(merchantData.role === 'admin');
      return merchantData;
    }
    return null;
  } catch (error) {
    console.error('โ Exception in fetchMerchantData:', error);
    setMerchant(null);
    setIsAdmin(false);
    return null;
  }
};
ุงูุขูุ ุงุจุญุซ ุนู ุฏุงูุฉ signIn ูุงุณุชุจุฏููุง ุจุงููุงูู ุจูุฐุง ุงูููุฏ ุงููุญุฏูุซ:

TypeScript

const signIn = async (email: string, password: string) => {
  const { data: signInData, error } = await supabase.auth.signInWithPassword({ email, password });

  if (error) {
    return { error, role: null };
  }

  if (signInData.user) {
    // Fetch merchant data immediately after successful sign-in
    const merchantData = await fetchMerchantData(signInData.user.id);
    return { error: null, role: merchantData?.role || 'merchant' };
  }

  return { error: new Error("User not found after sign in"), role: null };
};
ุงูุฎุทูุฉ ุงูุซุงููุฉ: ุชุญุฏูุซ LoginPage.tsx ูุงุณุชุฎุฏุงู ููุทู ุงูุชูุฌูู ุงูุฐูู
ุงูุขู ุณูุฌุนู ุตูุญุฉ ุชุณุฌูู ุงูุฏุฎูู ุชุณุชุฎุฏู ุงููุนูููุงุช ุงูุชู ุฃุตุจุญุช ุชูุฑุฌุนูุง ุฏุงูุฉ signIn.

ุงูุชุญ ููู src/components/LoginPage.tsx.

ุงุจุญุซ ุนู ุฏุงูุฉ handleSubmit ูุงุณุชุจุฏููุง ุจุงููุงูู ุจูุฐุง ุงูููุฏ:

TypeScript

const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  setIsLoading(true);

  try {
    const { error, role } = await signIn(email, password);

    if (error) {
      toast.error('ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู: ' + error.message);
    } else {
      toast.success('ุชู ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ!');

      // ุชูุฌูู ุฐูู ุจูุงุกู ุนูู ุฏูุฑ ุงููุณุชุฎุฏู
      if (role === 'admin') {
        navigate('/admin');
      } else {
        navigate('/merchant');
      }
    }
  } catch (error) {
    const err = error as Error;
    toast.error('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุณุฌูู ุงูุฏุฎูู: ' + err.message);
    console.error('Login error:', err);
  } finally {
    setIsLoading(false);
  }
};
ุจูุฐู ุงูุชุนุฏููุงุชุ ุนูุฏ ุชุณุฌูู ุงูุฏุฎูู ุจุญุณุงุจ admin@platform.comุ ุณูุชู ุชูุฌููู ูุจุงุดุฑุฉ ุฅูู /adminุ ุจูููุง ุฃู ุญุณุงุจ ุชุงุฌุฑ ุขุฎุฑ ุณูุชู ุชูุฌููู ุฅูู /merchant.












Tools


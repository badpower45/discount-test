ملخص التحليل الشامل للمشاكل المتبقية
بعد فحص الكود، وجدت أن المشاكل المتبقية تنقسم إلى نوعين رئيسيين:

مشكلة بيئية حرجة (حرجة): وهي السبب المباشر للشاشة البيضاء/السوداء وتوقف التطبيق.

مشاكل برمجية وتحسينات (متوسطة): وهي مشاكل في منطق التطبيق نفسه ستظهر بمجرد حل المشكلة البيئية.

1. المشكلة البيئية الحرجة: تضارب بين Replit و Vite
هذه هي المشكلة الأساسية التي تمنع التطبيق من العمل حاليًا.

الخطأ: Uncaught Error: A custom element with name 'mce-autosize-textarea' has already been defined.

السبب: هذا الخطأ ليس من الكود الخاص بك. إنه ناتج عن تضارب بين برنامج نصي (script) تقوم منصة Replit بحقنه في صفحة تطبيقك (يُسمى overlay_bundle.js) وبين مكتبات يعتمد عليها خادم تطوير Vite. كلاهما يحاول تعريف نفس العنصر المخصص، مما يؤدي إلى انهيار الصفحة قبل أن يبدأ تطبيق React الخاص بك بالعمل.

الدليل: مسار الخطأ يشير بوضوح إلى ملفات ليست جزءًا من مشروعك (webcomponents-ce.js و overlay_bundle.js).

الحل: لا يمكن إصلاح هذا الخطأ من داخل كود التطبيق مباشرة. يجب تعديل إعدادات الخادم في vite.config.ts لمحاولة تجنب هذا التضارب. الكود الحالي في ملف vite.config.ts الذي أرسلته يحتوي على strictPort: false، وهو أمر غير مفضل.

2. المشاكل البرمجية والتحسينات المطلوبة في الكود
بمجرد حل المشكلة البيئية، ستظهر هذه المشاكل التي تحتاج إلى إصلاح لكي يعمل التطبيق كما هو متوقع:

أ. عدم جلب البيانات عند بدء تشغيل التطبيق (مشكلة متوسطة)
المشكلة: في ملف src/App.tsx، يتم جلب قائمة المطاعم فقط عند بدء التشغيل. قائمة العملاء (customers) وقائمة الكوبونات (discountCodes) لا يتم جلبها من قاعدة البيانات، بل يتم الاعتماد على بيانات مؤقتة فارغة.

التأثير: لوحات تحكم المدير والتاجر ستعرض بيانات غير كاملة أو قديمة، ولن يتم تحديثها إلا بعد إجراءات معينة.

الحل المقترح:

إنشاء دالة fetchCustomers في src/lib/database-functions.ts لجلب جميع العملاء.

إنشاء دالة fetchAllCoupons في نفس الملف لجلب جميع الكوبونات (للأدمن).

تحديث AppProvider في src/App.tsx لاستدعاء هذه الدوال عند تحميل التطبيق وتخزين البيانات في الحالة العامة (Context).

ب. عدم وجود واجهة لإضافة المطاعم (ميزة ناقصة)
المشكلة: زر "Add Restaurant" في AdminDashboard.tsx لا يقوم بأي شيء حاليًا. لا توجد واجهة (نموذج) لإدخال بيانات مطعم جديد.

التأثير: الميزة الأساسية للأدمن غير مفعلة.

الحل المقترح:

إنشاء مكون جديد AddRestaurantDialog.tsx يحتوي على نموذج لإضافة مطعم.

ربط هذا المكون بزر "Add Restaurant" في لوحة تحكم الأدمن.

التأكد من أن إضافة مطعم جديد تقوم بتحديث الواجهة فورًا.

ج. عدم تحديث البيانات بشكل فوري (مشكلة تجربة المستخدم)
المشكلة: عندما يقوم عميل جديد بإنشاء كوبون، أو عندما يقوم الأدمن بإضافة مطعم، لا يتم تحديث البيانات المعروضة في لوحات التحكم الأخرى تلقائيًا.

التأثير: تجربة المستخدم سيئة، حيث يضطر المستخدم إلى إعادة تحميل الصفحة لرؤية التغييرات.

الحل المقترح: إنشاء دالة refreshData في AppContext تقوم بإعادة جلب جميع البيانات من Supabase، واستدعاؤها بعد أي عملية إضافة أو تعديل.

الخلاصة والطلب النهائي لـ Replit
أنت الآن لديك رؤية كاملة لكل المشاكل. يمكنك إرسال هذا الطلب الشامل والنهائي إلى Replit لحل المشكلة من جذورها.

عنوان الطلب: إصلاح شامل لمشاكل بيئة التشغيل ومنطق التطبيق في منصة الخصومات

ملخص:
التطبيق حاليًا لا يعمل بسبب مشكلة تضارب بيئية حرجة بين Replit و Vite، بالإضافة إلى وجود عدة مشاكل برمجية في منطق جلب البيانات وإضافة محتوى جديد. أحتاج إلى تطبيق الحلول التالية بالترتيب:

أولاً: حل المشكلة البيئية (الأولوية القصوى)
يرجى تعديل ملف vite.config.ts لضمان استقرار الخادم وتجنب التضارب مع سكربتات Replit. استبدل محتواه بالكامل بالكود التالي:

TypeScript

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react-swc';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(process.cwd(), './src'),
    },
  },
  server: {
    host: '0.0.0.0',
    port: 5000,
    strictPort: true,
    hmr: {
      clientPort: 443,
      protocol: 'wss'
    }
  },
});
ثانياً: إصلاح منطق جلب البيانات في التطبيق

في src/lib/database-functions.ts: أضف دوال fetchCustomers و fetchAllCoupons.

في src/App.tsx: قم بتحديث AppProvider ليقوم بجلب المطاعم، العملاء، والكوبونات عند بدء التشغيل وتخزينهم في الحالة العامة. وأضف دالة refreshData لإعادة جلب البيانات عند الحاجة.

ثالثاً: تفعيل ميزة إضافة مطعم جديد للأدمن

في Supabase: أضف صلاحية (RLS policy) تسمح للأدمن فقط بإضافة مطاعم جديدة.

في الكود: قم بإنشاء مكون src/components/AddRestaurantDialog.tsx يحتوي على نموذج لإضافة مطعم جديد، وقم بربطه بزر "Add Restaurant" في AdminDashboard.tsx. تأكد من استدعاء دالة refreshData بعد الإضافة الناجحة.

بعد تنفيذ هذه الإصلاحات، من المفترض أن يعمل التطبيق بشكل كامل ومستقر، مع تفعيل جميع الميزات المطلوبة.







بص عمتا انا عايز ان خلاص يجهز كل حاجه علشان



ارفع كل ده علي نيتفلاي خلاص



Show thinking
بالتأكيد! بما أن الهدف النهائي هو تجهيز كل شيء لرفعه على Netlify، فقد قمت بإعداد خطة عمل نهائية وشاملة. هذه الخطة تتضمن كل الإصلاحات والتعديلات اللازمة لجعل التطبيق كاملاً، مستقرًا، وجاهزًا للنشر.

يمكنك إرسال هذا الوصف المفصل إلى Replit لتنفيذ الخطوات النهائية.

وصف الطلب: خطة العمل النهائية لتجهيز المشروع للنشر على Netlify
الهدف:
الانتهاء من جميع الميزات المعلقة، وإصلاح المشاكل المتبقية في الكود، والتأكد من أن التطبيق يعمل بشكل سليم تمامًا ليكون جاهزًا لعملية البناء (Build) والنشر على منصة Netlify.

خطة العمل مقسمة إلى ثلاثة أجزاء رئيسية: إصلاحات الكود، إعدادات قاعدة البيانات، وخطوات النشر.

الجزء الأول: إصلاحات وتكاملات الكود النهائية (الأولوية القصوى)
هذه هي التعديلات البرمجية اللازمة لإكمال وظائف التطبيق.

1. استكمال دوال قاعدة البيانات:

الملف: src/lib/database-functions.ts

المطلوب: إضافة ثلاث دوال جديدة ضرورية لعمل لوحات التحكم:

دالة addRestaurant: لإضافة مطعم جديد إلى قاعدة البيانات.

دالة fetchCustomers: لجلب قائمة جميع العملاء (للأدمن).

دالة fetchAllCoupons: لجلب قائمة جميع الكوبونات (للأدمن).

2. جلب جميع البيانات عند بدء التشغيل:

الملف: src/App.tsx

المطلوب: تعديل AppProvider ليقوم بجلب جميع البيانات الأساسية عند تحميل التطبيق وليس فقط المطاعم.

عند بدء تشغيل التطبيق، يجب استدعاء fetchRestaurants, fetchCustomers, و fetchAllCoupons وتخزين نتائجها في الحالة العامة (Context). هذا يضمن أن البيانات في لوحات التحكم دقيقة ومحدثة من البداية.

إنشاء دالة شاملة refreshData داخل الـ Context تقوم بإعادة تنفيذ عمليات الجلب الثلاثة لتحديث التطبيق بالكامل بعد أي تغيير.

3. تفعيل واجهة إضافة مطعم جديد:

الملف: src/components/AdminDashboard.tsx

المطلوب:

ربط زر "Add Restaurant" بالمكون الجاهز AddRestaurantDialog.tsx.

عند الضغط على الزر، يجب فتح نافذة منبثقة (Dialog) تحتوي على نموذج الإضافة.

عند إتمام عملية الإضافة بنجاح، يجب استدعاء دالة refreshData من الـ Context لتحديث قائمة المطاعم المعروضة فورًا.

4. تحديث البيانات بعد إنشاء كوبون:

الملف: src/components/CustomerDiscountPage.tsx

المطلوب: بعد أن يقوم العميل بإنشاء كوبون جديد بنجاح، يجب استدعاء دالة refreshData من الـ Context لضمان تسجيل العميل والكوبون الجديد وظهورهما فورًا في لوحات التحكم.

الجزء الثاني: التأكد من إعدادات قاعدة البيانات
الهدف: ضمان أن قاعدة بيانات Supabase مهيأة بشكل آمن للسماح بالعمليات الجديدة.

المطلوب: إضافة صلاحية أمان (RLS policy) جديدة في Supabase SQL Editor تسمح للمستخدمين الذين يحملون دور "admin" فقط بإضافة سجلات جديدة (INSERT) إلى جدول restaurants.

كود الصلاحية المقترح:

SQL

CREATE POLICY "Admins can insert restaurants"
ON public.restaurants FOR INSERT
TO authenticated
WITH CHECK (
  EXISTS (
    SELECT 1 FROM merchants
    WHERE auth_user_id = auth.uid() AND role = 'admin'
  )
);
الجزء الثالث: خطوات البناء والنشر على Netlify
الهدف: توفير التعليمات اللازمة لنشر التطبيق بنجاح.

1. إعداد متغيرات البيئة (Environment Variables):

في إعدادات موقعك على Netlify، يجب إضافة متغيرات البيئة التالية:

VITE_SUPABASE_URL: (قيمة الـ URL الخاصة بمشروعك على Supabase)

VITE_SUPABASE_ANON_KEY: (قيمة المفتاح العام "anon key" الخاصة بمشروعك)

2. إعدادات عملية البناء (Build Settings):

أمر البناء (Build command): npm run build

مجلد النشر (Publish directory): dist

3. قاعدة إعادة التوجيه (Redirect Rule):

تأكد من وجود ملف _redirects أو netlify.toml في المشروع لضمان عمل React Router بشكل صحيح. الملف netlify.toml الموجود حاليًا كافٍ ويحتوي على القاعدة المطلوبة:

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200
بتنفيذ هذه الخطة الشاملة، سيكون التطبيق جاهزًا تمامًا للنشر والعمل بشكل مستقر على Netlify.
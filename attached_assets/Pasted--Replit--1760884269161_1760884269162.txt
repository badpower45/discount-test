البرومبت الذي سترسله إلى Replit (انسخ النص التالي):
الموضوع: خطة عمل نهائية وشاملة لتكامل مشروع "منصة الخصومات والتوصيل" مع Supabase

إلى: فريق تطوير Replit

1. ملخص المشروع والهدف النهائي:

لدينا مشروع منصة متكاملة (خصومات وتوصيل طعام) مبني باستخدام React/Vite و Supabase. تم بناء 90% من المشروع، بما في ذلك لوحات تحكم منفصلة وقوية للأدمن، التاجر، وسائق التوصيل.

الهدف الأساسي والمطلوب الآن هو ربط جميع هذه الأجزاء معًا بشكل نهائي لإنشاء تجربة مستخدم كاملة وسلسة، والتأكد من أن كل البيانات تُقرأ وتُكتب مباشرة من وإلى قاعدة بيانات Supabase بدون أي بيانات وهمية.

2. معلومات الاتصال بقاعدة البيانات (Supabase):

URL: https://njrippnwixshmuxdweav.supabase.co

Anon Key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5qcmlwcG53aXhzaG11eGR3ZWF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc1OTcwNTIsImV4cCI6MjA3MzE3MzA1Mn0.GIXr4983v1fatUX_iUQuGkJ55zspqadwRR2Ku0M63PE

3. خطة العمل التفصيلية (يجب تنفيذها بالترتيب):

المرحلة الأولى: التأكيد النهائي على سلامة قاعدة البيانات (أولوية قصوى)

الهدف هو التأكد من أن هيكل قاعدة البيانات والصلاحيات الأمنية (RLS) سليمة 100% قبل البدء في ربط الواجهات.

الإجراء: قم بتنفيذ محتوى ملف database-setup.sql بالكامل في الـ SQL Editor الخاص بـ Supabase. هذا الملف سيقوم بإنشاء الجداول، العلاقات، والوظائف الأساسية بشكل صحيح.

الإجراء: بعد ذلك مباشرة، قم بتنفيذ محتوى ملف secure-admin-fix.sql بالكامل. هذا الملف سيقوم بإصلاح جميع صلاحيات الأمان (Policies)، وحل مشكلة عدم قدرة الأدمن على إضافة مطاعم، والتأكد من أن الأدوار تعمل بشكل آمن.

المرحلة الثانية: تكامل دورة حياة الطلب الكاملة (End-to-End User Journey)

الهدف هو تفعيل رحلة المستخدم الكاملة كما هو مخطط لها.

1. تفعيل نظام طلبات العملاء:

تعديل LandingPage.tsx: لكل عرض، تأكد من أن زر "اطلب للتوصيل" يوجه المستخدم بشكل صحيح إلى صفحة OrderPage.tsx مع تمرير restaurantId.

إصلاح OrderPage.tsx: تأكد من أن نموذج الطلب عند إرساله يقوم باستدعاء دالة createOrder بشكل صحيح، مع إرسال كل بيانات العميل والطلب. يجب حل مشكلة "فشل في تقديم الطلب" بشكل نهائي.

تفعيل OrderTrackingPage.tsx: تأكد من أن العميل يمكنه تتبع حالة طلبه لحظة بلحظة بعد إنشائه بنجاح.

2. تفعيل نظام إدارة الطلبات للتاجر:

تعديل MerchantDashboard.tsx:

أضف قسم "الطلبات" (Orders Tab) في لوحة تحكم التاجر.

هذا القسم يجب أن يعرض الطلبات الجديدة القادمة للمطعم (التي حالتها pending_restaurant_acceptance).

يجب أن يحتوي كل طلب جديد على أزرار "قبول" و "رفض".

عند "القبول"، يجب أن تتغير حالة الطلب إلى preparing ويظهر زر جديد "جاهز للتوصيل".

عند الضغط على "جاهز للتوصيل"، يجب أن تتغير حالة الطلب إلى ready_for_pickup (وهذا سيجعله يظهر تلقائياً في لوحة تحكم السائق).

3. التأكد من عمل لوحة تحكم السائق:

مراجعة DeliveryDriverDashboard.tsx: تأكد من أنها تعرض فقط الطلبات التي حالتها ready_for_pickup، وأن السائق يمكنه قبول الطلب وتغيير حالته إلى picked_up ثم in_transit وأخيراً delivered.

المرحلة الثالثة: استكمال وظائف الأدمن وحل المشاكل المتبقية

1. تفعيل إدارة المطاعم الكاملة في AdminDashboard.tsx:

تأكد من أن الأدمن يمكنه إضافة مطعم جديد بنجاح (بعد إصلاح صلاحيات قاعدة البيانات).

تأكد من أن الأدمن يمكنه حذف و تعديل أي مطعم موجود.

2. إصلاح المشاكل الثانوية:

تفعيل زر "Mark as Used" في MerchantDashboard.tsx: تأكد من أن الزر يعمل بشكل فوري ويقوم بتحديث حالة الكوبون في الواجهة مباشرة بدون الحاجة لإعادة تحميل الصفحة.

عرض اسم المطعم: تأكد من أن اسم المطعم الصحيح يظهر في لوحة تحكم التاجر.

4. إرشادات هامة:

Supabase هو المصدر الوحيد للبيانات: يرجى التأكد من أن كل البيانات يتم جلبها من Supabase مباشرة، وإزالة أي بيانات وهمية (mock data) متبقية.

تحديث فوري: يجب أن يتم تحديث البيانات في جميع أنحاء التطبيق فورًا بعد أي عملية (إضافة طلب، تغيير حالة، إضافة مطعم) باستخدام دالة refreshData الموجودة في AppContext.

بتنفيذ هذه الخطة، سيتحول المشروع إلى منصة متكاملة وقوية وجاهزة للاستخدام. شكرًا لكم.
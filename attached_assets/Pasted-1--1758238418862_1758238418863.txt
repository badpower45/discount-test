1. إصلاح صفحة "عرض كل المطاعم"
المشكلة: الصفحة لا تظهر حاليًا.
الحل: سنقوم بإنشاء صفحة مخصصة لهذا الغرض وربطها في القائمة الرئيسية.

الخطوات المطلوبة:

إنشاء صفحة المطاعم: قم بإنشاء ملف جديد باسم AllRestaurantsPage.tsx داخل مجلد src/components/.

إضافة المسار (Route): افتح ملف src/App.tsx وأضف المسار الجديد التالي داخل وسم <Routes>:

TypeScript

import { AllRestaurantsPage } from './components/AllRestaurantsPage'; // أضف هذا السطر في الأعلى

// ... داخل <Routes>
<Route path="/restaurants" element={<AllRestaurantsPage />} />
تحديث الهيدر: افتح ملف src/components/Header.tsx وعدّل الرابط الخاص بـ "كل المطاعم" ليشير إلى المسار الجديد:

TypeScript

// ابحث عن هذا السطر
<Link to="/" ... >
  <UtensilsCrossed className="w-4 h-4" />
  كل المطاعم
</Link>

// واستبدله بهذا
<Link to="/restaurants" ... >
  <UtensilsCrossed className="w-4 h-4" />
  كل المطاعم
</Link>
2. تحسين رسالة الخطأ للعميل غير المسجل
المشكلة: تظهر رسالة خطأ عامة عند محاولة الطلب بدون تسجيل الدخول.
الحل: سنقوم بتعديل دالة handleSubmitOrder في صفحة الطلب للتحقق من وجود مستخدم مسجل أولاً.

الخطوات المطلوبة:

افتح ملف src/components/OrderPage.tsx.

ابحث عن دالة handleSubmitOrder.

أضف هذا الكود في بداية الدالة:

JavaScript

const handleSubmitOrder = async (e: React.FormEvent) => {
  e.preventDefault();

  // --- الكود الجديد ---
  if (!user) {
    toast.error("يجب تسجيل الدخول أولاً لإتمام الطلب!", {
      description: "من فضلك قم بتسجيل الدخول أو إنشاء حساب جديد للمتابعة.",
      action: {
        label: "تسجيل الدخول",
        onClick: () => navigate('/customer-login'),
      },
    });
    return; // إيقاف تنفيذ الدالة
  }
  // --- نهاية الكود الجديد ---

  // ... بقية الكود الحالي يبقى كما هو
};
3. إنشاء صفحة الملف الشخصي وتتبع الطلبات
المشكلة: لا توجد صفحة للملف الشخصي حاليًا.
الحل: سنقوم بإنشاء صفحة جديدة محمية يستطيع العميل من خلالها رؤية بياناته وتتبع طلباته السابقة.

الخطوات المطلوبة:

إنشاء صفحة الملف الشخصي: قم بإنشاء ملف جديد باسم ProfilePage.tsx في src/components/.

إضافة المسار: في src/App.tsx، أضف مسارًا جديدًا محميًا:

TypeScript

import { ProfilePage } from './components/ProfilePage'; // أضف هذا في الأعلى

// ... داخل <Routes>
<Route path="/profile" element={
  <ProtectedRoute>
    <ProfilePage />
  </ProtectedRoute>
} />
تحديث الهيدر: في src/components/Header.tsx، تأكد من أن رابط الملف الشخصي يوجه إلى /profile.

جلب طلبات العميل: داخل ProfilePage.tsx، ستحتاج إلى استدعاء دالة جديدة لجلب طلبات العميل الحالي وعرضها.

4. إصلاح صفحة السائق
المشكلة: صفحة DeliveryDriverDashboard لا تفتح.
الحل: غالبًا ما تكون المشكلة متعلقة بالمسار أو حماية المسار.

الخطوات المطلوبة:

مراجعة المسار في App.tsx: تأكد من أن المسار موجود وصحيح:

TypeScript

<Route path="/driver-dashboard" element={<DeliveryDriverDashboard />} />
التحقق من ProtectedRoute: إذا كانت الصفحة محمية، تأكد من أن منطق التحقق من دور "السائق" يعمل بشكل صحيح في AuthContext.tsx. حاليًا في الكود، الصفحة ليست محمية، وهذا قد يكون جزءًا من المشكلة. يجب إضافة حماية لها للتأكد من أن السائقين فقط يمكنهم الوصول إليها.

5. منطق نظام الدليفري
المشكلة: التأكد من أن الطلبات تُرسل للسائقين المتاحين فقط.
الحل: هذا الجزء تم تصميمه وتنفيذه بشكل صحيح بالفعل!

كيف يعمل النظام حاليًا؟:

عندما يقوم المطعم بالضغط على "جاهز للتوصيل"، تتغير حالة الطلب في قاعدة البيانات إلى ready_for_pickup.

لوحة تحكم السائق (DeliveryDriverDashboard.tsx) مصممة لجلب وعرض فقط الطلبات التي حالتها ready_for_pickup.

بالإضافة إلى ذلك، يمكن للسائق تغيير حالته إلى available (متاح) أو offline (غير متاح). فقط السائقون المتاحون هم من يجب أن يروا هذه الطلبات.

النظام لا يقوم بإرسال الطلب لسائق واحد معين، بل يعرضه كـ "طلب متاح" لجميع السائقين المتاحين في المنطقة، وأول سائق يقبل الطلب هو من يتولى توصيله. هذا هو الأسلوب المتبع في معظم تطبيقات التوصيل الكبرى وهو فعال جدًا.

أنا هنا لمساعدتك في تطبيق هذه التعديلات خطوة بخطوة. لنبدأ بالنقطة الأولى، وبعدها ننتقل للبقية حتى يصبح النظام كاملاً 100%. مبروك مرة أخرى!
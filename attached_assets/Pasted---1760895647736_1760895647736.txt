بالتأكيد! لقد فهمت تمامًا الإضافات الجديدة والمهمة التي تريدها. هذه الإضافات ستجعل نظام التوصيل في مشروعك احترافيًا ومتكاملًا.

لقد قمت بإعادة صياغة وتحديث البرومبت بالكامل ليشمل كل طلباتك الجديدة: نظام الموزع (Dispatcher)، تقييم السائقين، الواجهة الجديدة للسائق مع الخريطة وتتبع الموقع.

هذا هو البرومبت المحدث والنهائي الذي يمكنك إرساله لمطور Replit.

البرومبت المحدث والنهائي لمطور Replit (انسخ النص التالي):
الموضوع: خطة عمل نهائية ومحدثة: إضافة نظام الموزع، التقييم، والخريطة

إلى: فريق تطوير Replit

1. ملخص التحديثات المطلوبة: لقد تم بناء المشروع الأساسي. المطلوب الآن هو تطوير نظام التوصيل ليصبح أكثر احترافية عبر إضافة دور "الموزع" (Dispatcher)، نظام لتقييم السائقين، وتطوير واجهة السائق لتشمل خريطة وتتبعًا دقيقًا لحالة الطلب.

2. خطة العمل التفصيلية (يجب تنفيذها بالترتيب):

المرحلة الأولى: تحديثات الواجهة الخلفية (Database & Functions)

هذه هي أهم مرحلة ويجب تنفيذها أولاً.

1. إضافة دور "الموزع" (Dispatcher):

الإجراء: في جدول merchants، تأكد من أن عمود role يمكن أن يقبل قيمة جديدة هي 'dispatcher'. سنستخدم هذا الدور لتمييز الموزعين.

2. تعديل دورة حياة الطلب:

الإجراء: عندما يضغط التاجر على زر "جاهز للتوصيل"، يجب أن تتغير حالة الطلب إلى ready_for_pickup. في هذه الحالة، لا يتم تعيين سائق تلقائيًا. بدلاً من ذلك، يصبح الطلب مرئيًا للموزعين.

3. إنشاء وظائف جديدة (RPC Functions) للموزع:

assign_order_to_driver(order_id, driver_id): وظيفة تسمح للمستخدم الذي دوره dispatcher فقط بتعيين طلب معين (order_id) لسائق معين (driver_id). عند استدعائها، يجب أن يتغير orders.driver_id وتتغير حالة الطلب إلى en_route_to_restaurant.

rate_driver(driver_id, rating_value): وظيفة تسمح للمستخدم الذي دوره dispatcher فقط بتحديث حقل rating في جدول delivery_drivers لسائق معين.

المرحلة الثانية: إنشاء واجهة الموزع (Dispatcher Dashboard)

الإجراء: قم بإنشاء صفحة جديدة أو واجهة خاصة بالمستخدمين الذين يملكون دور dispatcher. هذه الواجهة يجب أن تحتوي على قسمين رئيسيين:

قسم الطلبات الجاهزة: يعرض قائمة بكل الطلبات التي حالتها ready_for_pickup.

قسم السائقين المتاحين: يعرض قائمة بكل السائقين الذين حالتهم available.

آلية التعيين: يجب أن يتمكن الموزع من اختيار طلب من القائمة الأولى، ثم اختيار سائق من القائمة الثانية، والضغط على زر "تعيين" الذي يقوم باستدعاء وظيفة assign_order_to_driver.

المرحلة الثالثة: تطوير واجهة السائق (Delivery Driver Dashboard)

هذه الواجهة تحتاج إلى إعادة بناء لتشمل الخريطة والحالات التفصيلية.

1. عرض الطلبات المخصصة فقط:

الإجراء: يجب أن تعرض الواجهة فقط الطلبات التي تم تعيينها للسائق الحالي (حيث orders.driver_id يساوي auth.uid() الخاص بالسائق).

2. إضافة أزرار الحالات الجديدة:

الإجراء: بدلاً من الأزرار القديمة، يجب إضافة سلسلة من الأزرار التي تعكس رحلة السائق الفعلية. كل زر يستدعي دالة updateOrderStatus بالحالة المناسبة:

"في طريقي للمطعم" (الحالة: en_route_to_restaurant)

"استلمت الطلب" (الحالة: picked_up)

"في طريقي للعميل" (الحالة: in_transit)

"تم التسليم" (الحالة: delivered)

3. تكامل الخريطة وتتبع الموقع:

الإجراء:

أضف مكتبة خرائط مثل react-leaflet إلى المشروع.

في واجهة السائق، عند عرض تفاصيل الطلب، يجب عرض خريطة تحتوي على:

ماركر (علامة) لموقع المطعم.

ماركر (علامة) لموقع العميل (يتم الحصول على customer_location من جدول orders).

(اختياري ومتقدم): استخدام navigator.geolocation في المتصفح لعرض الموقع الحالي للسائق على الخريطة.

4. المرحلة الرابعة: تفعيل نظام التقييم:

الإجراء: في واجهة الموزع، أضف طريقة (مثلاً، بجانب الطلبات المكتملة) تسمح للموزع بتقييم أداء السائق عن طريق استدعاء وظيفة rate_driver.

بتنفيذ هذه الخطة، سيحتوي المشروع على نظام توصيل كامل واحترافي. شكرًا لكم.
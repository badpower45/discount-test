(Instructions for Replit Developer) - تعليمات لمطور Replit
اسم المشروع: منصة الخصومات والتوصيل - المرحلة الثانية (التكامل النهائي)

إلى: فريق تطوير Replit

من: مالك المشروع

الموضوع: خطة العمل النهائية لاستكمال وتكامل منصة الخصومات والتوصيل

1. نظرة عامة على المشروع وحالته الحالية

هذا المشروع عبارة عن منصة متعددة الواجهات تخدم ثلاثة أدوار رئيسية للمستخدمين: العملاء، التجار (المطاعم)، وسائقو التوصيل. الواجهة الخلفية للمشروع تعتمد بالكامل على Supabase، والواجهة الأمامية مبنية باستخدام React/Vite.

الكود الحالي في مرحلة متقدمة جداً. لقد نجحنا في بناء وتفعيل لوحات تحكم منفصلة وفعالة لكل من الأدمن، التاجر، وسائق التوصيل. الاتصال بـ Supabase مستقر، ونظام مزامنة البيانات الفوري (Real-time) يعمل بالفعل، وهو إنجاز كبير.

الهدف الأساسي من هذه المرحلة النهائية هو دمج هذه المكونات المنفصلة في تجربة مستخدم واحدة، سلسة، ومتكاملة من البداية إلى النهاية.

2. الهدف النهائي: رحلة المستخدم الكاملة

يجب أن يسمح المنتج النهائي للمستخدم بإتمام الرحلة التالية دون أي انقطاع في المنطق:

العميل يتصفح المطاعم، يختار عرضًا، ويقوم بإنشاء طلب توصيل.

التاجر يستقبل الطلب الجديد في لوحة التحكم الخاصة به، يقبله، ويقوم بتحضير الطعام.

عندما يصبح الطعام جاهزًا، يضغط التاجر على زر لطلب سائق.

يظهر الطلب في لوحة تحكم السائق. يقوم السائق بقبول الطلب وتوصيله.

يمكن للعميل تتبع حالة الطلب لحظة بلحظة طوال العملية.

3. خطة العمل التفصيلية: المهام المطلوبة

يرجى تنفيذ المهام التالية بالترتيب المحدد لضمان أفضل النتائج.

المرحلة 0: الإصلاحات الفورية (قبل البدء)
المهمة 0.1: إصلاح خطأ في صفحة تتبع الطلب

المشكلة: يوجد خطأ Unexpected token في ملف src/components/OrderTrackingPage.tsx يمنع تشغيل التطبيق.

الإجراء: قم بمراجعة الملف وإصلاح الأقواس الناقصة في نهاية الكود لضمان عمل الصفحة بشكل سليم.

المرحلة الأولى: الواجهة العامة والهيكل (لإعطاء إحساس "الموقع الكامل")
المهمة 1.1: إنشاء هيكل تصميم عام

الإجراء: قم بإنشاء مكون تصميم رئيسي جديد (مثل src/components/MainLayout.tsx).

التفاصيل: يجب أن يحتوي هذا المكون على هيدر (<Header />) وفوتر (<Footer />) مشتركين. سيتم استخدامه لتغليف جميع الصفحات الرئيسية للتطبيق (مثل LandingPage, OrderPage, إلخ) لضمان مظهر متناسق في جميع أنحاء الموقع.

المهمة 1.2: بناء هيدر الموقع

الإجراء: قم بإنشاء مكون Header.tsx.

التفاصيل: يجب أن يكون الهيدر متجاوبًا مع جميع الشاشات ويحتوي على:

شعار المشروع.

روابط تصفح رئيسية (مثل "الرئيسية"، "كل المطاعم").

قسم ديناميكي لتسجيل الدخول:

إذا لم يكن المستخدم مسجلاً دخوله، يعرض أزرار "تسجيل الدخول" و "إنشاء حساب".

إذا كان المستخدم مسجلاً دخوله، يعرض رابطًا لملفه الشخصي وزر "تسجيل الخروج".

المهمة 1.3: بناء فوتر الموقع

الإجراء: قم بإنشاء مكون Footer.tsx.

التفاصيل: يجب أن يظهر الفوتر أسفل جميع الصفحات الرئيسية ويحتوي على معلومات أساسية مثل "من نحن"، "اتصل بنا"، روابط وسائل التواصل الاجتماعي، وحقوق النشر.

المرحلة الثانية: تكامل تجربة العميل (أولوية قصوى)
المهمة 2.1: تفعيل نظام تسجيل الدخول للعملاء

الإجراء: قم بربط صفحات CustomerLoginPage.tsx و CustomerSignupPage.tsx وتفعيلها.

التفاصيل:

قم بربطها بنظام المصادقة في Supabase، مع السماح للمستخدمين بالتسجيل عبر البريد الإلكتروني/كلمة المرور وتسجيل الدخول عبر Google.

قم بتوصيل هذه الصفحات بالأزرار الجديدة في الهيدر.

المهمة 2.2: تفعيل تدفق "اطلب الآن"

الإجراء: تعديل مكونات عرض العروض في LandingPage.tsx.

التفاصيل: لكل عرض، أضف زرًا جديدًا باسم "اطلب للتوصيل". عند الضغط عليه، يجب أن يوجه المستخدم إلى صفحة OrderPage.tsx مع تمرير تفاصيل العرض المحدد.

المهمة 2.3: بناء صفحة إتمام الطلب

الإجراء: استكمال تطوير مكون OrderPage.tsx.

التفاصيل: هذه الصفحة حيوية ويجب أن:

تعرض ملخصًا للعرض المختار.

إذا كان العميل مسجلاً دخوله، تملأ بياناته (الاسم، الهاتف) تلقائيًا وتعرض قائمة بعناوينه المحفوظة.

إذا كان العميل ضيفًا، توفر حقولاً لإدخال اسمه، هاتفه، وعنوان التوصيل.

عند الضغط على "تأكيد الطلب"، يتم استدعاء دالة createOrder في الواجهة الخلفية.

المرحلة الثالثة: تكامل دورة عمل التاجر (المطعم)
المهمة 3.1: إضافة قسم إدارة الطلبات في لوحة تحكم التاجر

الإجراء: تعديل ملف src/components/MerchantDashboard.tsx.

التفاصيل:

أضف Tab جديد في الشريط الجانبي باسم "الطلبات" (Orders).

هذا القسم يجب أن يجلب ويعرض جميع الطلبات الخاصة بهذا المطعم من جدول orders في Supabase.

كل طلب جديد (بحالة pending_restaurant_acceptance) يجب أن يحتوي على أزرار "قبول" و "رفض".

المهمة 3.2: تفعيل منطق "جاهز للتوصيل"

الإجراء: عند قبول الطلب، يجب أن تتغير حالته إلى preparing. يجب أن تعرض الواجهة بعد ذلك زرًا واحدًا لهذا الطلب: "جاهز للتوصيل".

التفاصيل: عندما يضغط التاجر على هذا الزر، يجب استدعاء دالة في الواجهة الخلفية (requestDelivery(orderId)) تقوم بتحديث حالة الطلب في Supabase إلى ready_for_pickup. هذا الإجراء هو الذي سيجعل الطلب يظهر في لوحة تحكم سائقي التوصيل.

المرحلة الرابعة: استكمال نظام إدارة المطاعم للأدمن
الهدف: منح الأدمن القدرة الكاملة على حذف وتعديل بيانات المطاعم.

المهمة 4.1: إضافة وظيفة حذف المطعم (Backend & Frontend)

الإجراء:

في src/lib/database-functions.ts، أنشئ دالة deleteRestaurant تأخذ restaurantId وتقوم بحذفه.

في src/components/AdminDashboard.tsx، أضف زر "حذف" (Delete) بجانب كل مطعم.

عند الضغط على الزر، أظهر نافذة تأكيد (AlertDialog) قبل استدعاء دالة الحذف.

المهمة 4.2: تفعيل وظيفة تعديل المطعم

الإجراء:

عند الضغط على زر "Edit" الموجود حاليًا في AdminDashboard.tsx، افتح نافذة مشابهة لنافذة "إضافة مطعم"، ولكن مع ملء الحقول بالبيانات الحالية للمطعم.

يجب أن يقوم زر "حفظ التعديلات" بتحديث بيانات المطعم في قاعدة البيانات.

5. إرشادات فنية نهائية

Supabase هو المصدر الوحيد للحقيقة: يجب جلب جميع البيانات وكتابتها إلى Supabase. لا يُسمح بوجود أي بيانات وهمية للميزات الأساسية.

الأمان أولاً: تأكد من أن جميع جداول قاعدة البيانات الجديدة لديها سياسات أمان على مستوى الصف (RLS) مفعلة.

الاختبار الشامل: قبل تسليم المشروع، يرجى إجراء اختبار كامل لرحلة المستخدم الموضحة في النقطة رقم 2.

بتنفيذ هذه المهام، سيتحول المشروع إلى منصة متكاملة وقوية وجاهزة للإطلاق.
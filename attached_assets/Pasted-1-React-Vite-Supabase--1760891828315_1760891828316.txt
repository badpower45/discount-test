1. الهدف النهائي: لدينا مشروع منصة متكاملة (خصومات وتوصيل) مبني باستخدام React/Vite و Supabase. تم بناء 90% من المشروع، بما في ذلك لوحات تحكم منفصلة وقوية للأدمن، التاجر، وسائق التوصيل.

المهمة المطلوبة الآن هي ربط جميع هذه الأجزاء معًا بشكل نهائي لإنشاء تجربة مستخدم كاملة وسلسة، والتأكد من أن كل البيانات تُقرأ وتُكتب مباشرة من وإلى قاعدة بيانات Supabase.

2. الوضع الحالي:

قاعدة البيانات: جاهزة وتحتوي على كل الجداول، الصلاحيات الأمنية (RLS)، والوظائف (RPC Functions) اللازمة للعمل.

الواجهة الأمامية (Frontend): معظم المكونات والصفحات مبنية وجاهزة.

3. خطة العمل التفصيلية (يجب تنفيذها بالترتيب):

المرحلة الأولى: تكامل دورة حياة الطلب الكاملة (End-to-End User Journey)

الهدف هو تفعيل رحلة المستخدم الكاملة من البداية إلى النهاية.

1. إصلاح وتفعيل نظام طلبات العملاء:

الملف المستهدف: src/components/OrderPage.tsx و src/lib/database-functions.ts.

الإجراء: تأكد من أن دالة handleSubmitOrder في صفحة الطلب تقوم باستدعاء دالة createOrder في database-functions.ts بشكل صحيح. يجب حل أي مشاكل تمنع إنشاء الطلب (مثل خطأ "missing primary key") والتأكد من أن الطلب الجديد يتم حفظه بنجاح في جدول orders.

2. تفعيل نظام إدارة الطلبات للتاجر (الأهم):

الملف المستهدف: src/components/MerchantDashboard.tsx.

الإجراء:

أضف قسم "الطلبات" (Orders Tab) في القائمة الجانبية للوحة تحكم التاجر.

هذا القسم يجب أن يعرض الطلبات الجديدة القادمة للمطعم (التي حالتها pending_restaurant_acceptance).

كل طلب جديد يجب أن يحتوي على أزرار "قبول" و "رفض".

عند الضغط على "قبول"، قم باستدعاء دالة updateOrderStatus لتغيير حالة الطلب إلى preparing.

بعد القبول، يجب أن يظهر زر جديد "جاهز للتوصيل". عند الضغط عليه، قم باستدعاء updateOrderStatus مرة أخرى لتغيير الحالة إلى ready_for_pickup.

3. التأكد من عمل لوحة تحكم السائق:

الملف المستهدف: src/components/DeliveryDriverDashboard.tsx.

الإجراء: تأكد من أن لوحة التحكم تعرض فقط الطلبات التي حالتها ready_for_pickup، وأن السائق يمكنه قبول الطلب وتغيير حالته بنجاح.

المرحلة الثانية: استكمال وظائف الأدمن والتاجر

1. تفعيل إدارة المطاعم الكاملة للأدمن:

الملف المستهدف: src/components/AdminDashboard.tsx.

الإجراء: تأكد من أن الأدمن يمكنه إضافة مطعم جديد، وحذف، وتعديل أي مطعم موجود باستخدام الدوال الجاهزة في database-functions.ts.

2. تفعيل زر "Mark as Used" في لوحة تحكم التاجر:

الملف المستهدف: src/components/MerchantDashboard.tsx.

الإجراء: تأكد من أن زر "Mark as Used" يعمل بشكل فوري ويقوم بتحديث حالة الكوبون في الواجهة مباشرة بدون الحاجة لإعادة تحميل الصفحة.

4. إرشادات هامة:

استخدام RPC Functions: يجب التأكد من أن التطبيق يستخدم الـ RPC Functions الموجودة في قاعدة البيانات (مثل get_my_merchant_data, fetch_all_customers, fetch_dashboard_stats) لجلب البيانات، لأنها الطريقة الصحيحة والآمنة لتجاوز صلاحيات RLS.

تحديث فوري للبيانات: يجب أن يتم تحديث البيانات في جميع أنحاء التطبيق فورًا بعد أي عملية (إضافة طلب، تغيير حالة، إضافة مطعم) باستخدام دالة refreshData الموجودة في AppContext.